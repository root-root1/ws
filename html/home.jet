<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css" integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <title>Chat</title>
    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
</head>
<body>
    <div class="container">

        <div class="row">
            <div class="col">
                <h1>hello from Home</h1>
                <hr>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <h3>chat</h3>
                <div class="form-control">
                    <label for="username">Username </label>
                    <input type="text" id="username" name="username" class="form-control" autocomplete="off">
                </div>
                <div class="form-control">
                    <label for="message">Message </label>
                    <input type="text" id="message" name="message" class="form-control" autocomplete="off">
                </div>

                <hr>
                <a href="javascript:void(0);" class="btn btn-outline-secondary" id="sendBtn">Send Message</a>

                <input type="hidden" name="action" id="action">
                <div id="status" class="mt-5 float-end"></div>

                <div class="chatbox mt-5" id="output">
                
                </div>
            </div>
             <div class="col-md-4">
                <h3>Who's Online</h3>
                <ul id="online_users">

                </ul>
            </div>
        </div>
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js" integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>
   let socket = null;
   let out = document.getElementById("output");
   let userField = document.getElementById("username");
   let message = document.getElementById("message");

   window.onbeforeunload = function () {
       console.log("leaving")
       let jsonData = {
           action: "left"
       }

       socket.send(JSON.stringify(jsonData))
   }

    document.addEventListener("DOMContentLoaded", function() {
        socket = new ReconnectingWebSocket("ws://127.0.0.1:8000/ws", null, {debug: true, reconnectInterval: 3000})
        const offline = `<span class="badge bg-danger">Not Connected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;

        let status = document.getElementById("status")

        socket.onopen = () => {
            console.log("Successfully Connected")
            status.innerHTML = online;
        }

        socket.onclose = () => {
            console.log("Connection Close")
            status.innerHTML = offline;
        }

        socket.onerror = (e) => {
            console.log("Their is an error", e)
        }

        socket.onmessage = (message) => {
            let data = JSON.parse(message.data)
            switch (data.action) {
              case "list_users":
                  let ul = document.getElementById("online_users");
                  while (ul.firstChild) {
                      ul.removeChild(ul.firstChild)
                  }

                  if (data.connected_users.length > 0) {
                      data.connected_users.map((item) => {
                          let li = document.createElement("li")
                          li.appendChild(document.createTextNode(item))
                          ul.appendChild(li)
                      })
                  }
                  break;
              case "broadcast":
                      out.innerHTML = out.innerHTML + data.message + "<br>";
                      console.log(out)
                      break
            }
        }

        userField.addEventListener("change", function () {
            let jsonData = {
                action: "username",
                username: this.value
            }
            socket.send(JSON.stringify(jsonData))
        })

        message.addEventListener("keydown", function (event) {
            if (event.code === "Enter") {
                // console.log("enter message")
                if (!socket) {
                    console.log("No Connection");
                    return false;
                }

                event.preventDefault();
                event.stopPropagation();
                if ((userField.value === "") || (message.value === "")) {
                   errorMessage("Fill out Username and Message");
                   return false;
                }else{
                    sendMessage()
                }
            }
        })
        document.getElementById("sendBtn").addEventListener("click", function() {
            if ((userField.value === "") || (message.value === "")) {
                errorMessage("Fill out Username and Message");
                return false;
            }else{
                sendMessage()
            }
        })
    })

    function sendMessage() {
       let jsonData = {
           action: "broadcast",
           username: userField.value,
           message: message.value,
       }

       socket.send(JSON.stringify(jsonData));
       message.value = "";
    }

    function errorMessage(msg) {
       notie.alert({
            type: "error",
            text: msg
       })
    }
</script>
</html>